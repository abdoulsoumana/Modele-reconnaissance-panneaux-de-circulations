# -*- coding: utf-8 -*-
"""model_reconnaissance_panneaux.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/103GaoPu4S6JTkfnm-zdkAcA6bY_qT7gv

### Importation du dataset dans le clood
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""### Importation des packages"""

from keras.applications.inception_v3 import InceptionV3,preprocess_input,decode_predictions
from keras.preprocessing import image
import numpy as np
from keras.layers import Dense, GlobalAveragePooling2D,Dropout,Input
# from keras.layers.advanced_activations import LeakyReLU, ELU
from keras.models import Sequential,Model
from keras import backend as K
from IPython.display import display

"""### Chargement du modele et Pretraitement des données"""

base_model  = InceptionV3(weights = 'imagenet', include_top=False)
print('loaded model')

#Définir le dictionnaire pour le générateur de données d'image
data_gen_args = dict(preprocessing_function=preprocess_input, 
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    vertical_flip = True)

train_datagen = image.ImageDataGenerator(**data_gen_args)
test_datagen = image.ImageDataGenerator(**data_gen_args)

"""### Chargement des données d'entrainement et de validation (test)"""

train_generator = train_datagen.flow_from_directory("gdrive/My Drive/Colab Notebooks/base/train",
                                                    target_size=(299,299),batch_size=32)

valid_generator = test_datagen.flow_from_directory("gdrive/My Drive/Colab Notebooks/base/valid",
                                                     target_size=(299,299),batch_size=32)

!pip install h5py pyyaml
!pip install tf_nightly

"""### Création du modele CNN"""

model = Sequential()

# Premiere couche (couche d'entree)
model.add(Conv2D(filters=4, kernel_size=2, padding='same',
                 activation='relu', input_shape=(299, 299, 3)))
model.add(MaxPooling2D(pool_size=2))

# Deuxieme couche
model.add(Conv2D(filters=8, kernel_size=2, padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=2))
model.add(Dropout(0.1))

# Troisieme couche
model.add(Conv2D(filters=12, kernel_size=2, padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=2))
model.add(Dropout(0.2))

# Quatrieme couche
model.add(Conv2D(filters=16, kernel_size=2, padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=2))
model.add(Dropout(0.3))

# Cinquieme couche
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.4))

# Sixieme couche (couche de sortie/classification)
model.add(Dense(5, activation='softmax')) 


model.summary()

# Compilation du modele avant l'entrainement
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

"""### Arrêter la formation et sauvegarder le modele avec les meilleurs poids"""

from keras.callbacks import ModelCheckpoint,EarlyStopping

# Sauvegarder le modèle avec les meilleurs poids
checkpointer = ModelCheckpoint('gdrive/My Drive/Colab Notebooks/saved_model/benchmark.hdf5', verbose=1,save_best_only=True)

# Arrêtez la formation si le modèle ne montre aucune amélioration 
stopper = EarlyStopping(monitor='val_loss',min_delta=0.1,patience=0,verbose=1,mode='auto')

"""### Apprentissage du modele"""

history_model = model.fit_generator(train_generator, steps_per_epoch = 13,
                                    validation_data=valid_generator,
                                    validation_steps=3, 
                                    epochs=30,verbose=1,
                                    callbacks=[checkpointer])

"""### Afficher l'historique d'apprentissage ainsi que les poids"""

display(history_model.history)

"""### Afficher la courbe d'apprentissage"""

def plot_training(history):
    acc = history_model.history['acc'] 
    val_acc = history.history['val_acc']
    loss = history.history['loss']
    val_loss = history.history['val_loss']
    epochs  = range(len(acc))
    
    plt.plot(epochs,acc,'b')
    plt.plot(epochs,val_acc,'r')
    plt.title("Précision de formation et de validation")
    
    plt.figure()
    plt.plot(epochs,loss,'b')
    plt.plot(epochs,val_loss,'r')
    plt.title("Perte de formation et de validation")
    
    plt.show()

plot_training(history_model)

"""### Chargement du modele entrainé et prédiction"""

# Chargez les poids à partir du modèle affiné
model.load_weights('gdrive/My Drive/Colab Notebooks/saved_model/benchmark.hdf5')

# Commented out IPython magic to ensure Python compatibility.
from keras.preprocessing.image import img_to_array,load_img
import matplotlib.pyplot as plt
import cv2
# %matplotlib inline
def pred(img_path):    
    img = load_img(img_path,target_size = (299,299)) #Chargez l'image et réglez la taille cible sur la taille d'entrée de notre modèle
    x = img_to_array(img) # Convertir l'image en tableau
    x = np.expand_dims(x,axis=0) # Convertir le tableau à la forme (1, x, y, z)
    x = preprocess_input(x) # Utiliser la fonction d’entrée de prétraitement o soustraire la moyenne de toutes les images
    p = np.argmax(model.predict(x)) # Stocke l'argmax des prédictions
    if p==0:     # Si P=0 (Stop) , P=1 (Tourner a gauche) , P=2 (Tourner a droite) , P=3 (Quarante Km/h) , P=4 (Arrêt)
        print("STOP")
    elif p==1:
        print("TOURNER À GAUCHE")
    elif p==2:
        print("TOURNER À DROITE")
    elif p==3:
        print("QUARANTE KM/H")
    elif p==4:
        print("ARRÊT")

"""### Résultats de la prédiction avec les nouvelles images"""

pred("gdrive/My Drive/Colab Notebooks/1.png")
z = plt.imread('gdrive/My Drive/Colab Notebooks/1.png') 
plt.imshow(z);

pred("gdrive/My Drive/Colab Notebooks/q.jpg")
z = plt.imread('gdrive/My Drive/Colab Notebooks/q.jpg') 
plt.imshow(z);

pred("gdrive/My Drive/Colab Notebooks/test/q2.png")
z = plt.imread('gdrive/My Drive/Colab Notebooks/test/q2.png') 
plt.imshow(z);

pred("gdrive/My Drive/Colab Notebooks/test/td2.png")
z = plt.imread('gdrive/My Drive/Colab Notebooks/test/td2.png') 
plt.imshow(z);

pred("gdrive/My Drive/Colab Notebooks/test/tg2.png")
z = plt.imread('gdrive/My Drive/Colab Notebooks/test/tg2.png') 
plt.imshow(z);

pred("gdrive/My Drive/Colab Notebooks/test/st2.png")
z = plt.imread('gdrive/My Drive/Colab Notebooks/test/st2.png') 
plt.imshow(z);

pred("gdrive/My Drive/Colab Notebooks/test/st1.png")
z = plt.imread('gdrive/My Drive/Colab Notebooks/test/st1.png') 
plt.imshow(z);